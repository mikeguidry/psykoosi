* DO NOT PUBLISH WITH GIT HISTORY AND REMOVE NOTES/TODO *

TODO FOR PSY/MESZEK 10/15/15

This software is meant to test your own software, or network.  I take no responsbility for any damages caused by other uses from users with more malicious intent.

HIGH PRIORITY:

*** the virtual memory system is extremely slow
    we need to build a memory manager which will use real memory addresses
    with a lookup table to convert the addresses...
    
* integrate with real XEN so we can fuzz operating systems easily
  since real XEN uses x86_emulate() we can just create a secondary
  context for each VM with a copy of all the memory purely for fuzzing
  kernel.. or CoW.. check into drakvuf to get information on setting
  breakpoints in particular areas of the OS to dump instructions for
  the farm
  
* API proxy manager.. which will accept a snapshot and load it into memory
  and allow us to call API on the very context that the snapshots were created under
  
* fuzz x86_emulate() with x86_emulate() ;) 
  i didn't realize this WAS the actual XEN emulator...
  i really thought it was a full blown hypervisor rather than most instructions
  just being encapsulated... im executing this without entering into a hypervisor whatsoever
  which is sort of scary, and all implementations should be of interest
  
* detail documentation for open sourcing and explaining the direction so others can help build if they have ideas
  
* Finish API Proxy Multithreaded support.. should be done local side
  finish *ops* functions for x86_emulate().. or move to unnicorn

* coordinate log ID with the next API proxy call so any changed data
  get synchronized

* finish integrating dfuzz

* finish snapshot diff'ing so we can extend from a parent for quickly fuzzing
  deeper into applications
  
* create profiles using 'operations table' where we pass FILE I/O fuzzing
  tasks to an app with all the correct triggers (breakpoints) to dump fuzzing instructions

* create linear assembly code for 'native binary fuzzing' similar to the packets of information to distributed fuzz
  however these are 'binary rewrote' into normal C code that can output executables, asm.js webpages, etc
  
LOWER PRIORITY:

* for people without xeon PHIs.. create a docker version so everyone can begin fuzzing ASAP
  it should be pretty easy to get started.. moved to low priority

* use autohotkey, autoit, or create a new app which can control the top applications to perform various tasks..
  possibly monitor real executions of an app by injection, and monitor its window events
  replaying these events later to perform the same actions on other versions...

* integrate unicorn once we are finished versoin 1 and its finding bugs and released..

* this is moved to low since we attach using a debugger..
  generate a DLL to inject into an app which creates and uploads these packets
  for fuzzing that app with all memory, instructions, etc required to fuzz that software
  - verify speed of different hashing algorithms when enumerating memory allocated
    for dumping and spotting changes in between instructions/calls, or
    loading other files/sites/etc in the same app
    so once we have a base dump of memory.. we will only save the changes
    since that master 'snapshot' each time a new file is loaded, or site opened
    create a rewind for the processes (obviously this cant work for kernel handles, or FILE handles)
    maybe buffer those to emulate it still working properly and just dump to a temp file
    where it is only available during that execution
    
  DLL Notes:
  This is a DLL which is to be injected into a program that is going to be fuzzed...
  It's goals are to instrument every thread, and log all information once a FILE IO/NETWORK IO happens...
  the moment the first FILE IO/Network IO that is in a controlled location (IE: data directory, current directory and not a .dll/.exe/etc)
  or opens a network connection then it freezes and takes a snapshot of the entire memory base..
  from that point on it will log everything that happens and consider that original state 0

  it needs a controller as well because it should have the ability to manually snapshot 0
  and then rewind to 0 so the driver(whomever is controlling the app, or script) can 
  then load another file to be logged...

  every instruction will be emulated with the logger before it is actually executed on the real CPU

  all snapshots besides 0 are linked to each other to save space.. 
  if a function reads from a data location controlled by a FILE or Network IO then it gets added to a list
  and so does its own function.. and if it writes to a location, that gets marked and anything that writes to those locations
  are also monitored

  to handle some state machines... while ((c = *ptr++))  { we want to be able to determine if an entire function has read
  our data and wrote to another location.. a more 'higher level' appraoch than a single instruction reading/writing 

* rebuild relocation (or even just modify in memory) for PEs that do not have
  relocation table.. for a lot of programs this isnt an issue anymore due to
  ASLR enabled apps
  
* modify heap allocation to allow us to request specific areas of memory inside of the heap range..
  first scan and see if we have the range empty (by seeing if its within other heap allocations) and if the range is
  freed but bigger, then we can spit it up.. if its not taken then we can allocate it and then
  future allocations should go around it 
  
* integrate unicorn for multiple architecture support
  replace capstone using emulation (to get size of instruction) and 
  automatically swap endian-ness and detect absolute and immediate addressing
  after getting the size of the instruction.. unless qemu has things to give u this information
  but i dont think so...

* simultaneously brute force all architectures to find opcodes that can be used to
  detect the architecture.. and find a way to determine if a machine is
  win32, bsd, or linux without crashing in any location
  make an IR language or use TCG to make an arch independent, OS independent backdoor
  same as shlelcode but without the main technology.. use static inside once it drops to disk
  grab 1 compiled copy of the destination OS
  
  systematically determine if a crash will kill the process (port listening) or if it
  threads or safely exits if a crash happens so it prioritizes things that dont hurt the
  process/thread/system higher than things that do for worm infection
  
NEXT PROJECT AFTER THIS (WORM):
* Automatically generate exploits.. (for another branch to be merged later)
* Pick targets (targets listening/communicating over local network/internet)
   a. monitor to find addresses/memory/snapshots/etc after IO calls
* build <1k shellcode to be used as backdoor, spreading, etc for worm
* create a pub/privkey infrastructure to authenticate c&c commands
* create module for adding the infected machine to the global network of
  fuzzing, and exploit generation
* libpcap works on windows 10, find a signed version of libnet or alternative
  to use in the worm..maybe hook/hijack process exporer, and other programs
  which have drivers to do low level maintainence or analysis for use in the software
  to pick executables, and code that listen on ports etc
* launch 
 --------------
 NOTES
 --------------
 
 /* distribution of fuzzing tasks

   this needs to allow direct access to all classes to insert the
   necessary memory, code, etc and then it needs to be wiped after the tasks
   are completed...
   
   so brute force, bit flip, etc can all be distributed in ranges, and
   it could be mixed with a variety of software so no single process fuzzes
   the same software consistently.. this allows it to work against
   as many programs as the injectable DLL creates information regarding
   or allows an adware network to upload multiple versions of all apps
   to fuzz everything users generally users
   
   create a server side statistics engine to keep track of all software
   on each desktop machine and focus on the ones with higher counts
   focus and emulate the top versions  (highest count) of each
   application being fuzzed
    

*/
 byte map following instructions through emulation after IO/socket and if that instruction writes to another memory region.. follow it like a rover tap to find all instructions/functions that process the data

typedef struct _MEMORY_BASIC_INFORMATION {
  PVOID  BaseAddress;
  PVOID  AllocationBase;
  DWORD  AllocationProtect;
  SIZE_T RegionSize;
  DWORD  State;
  DWORD  Protect;
  DWORD  Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

VirtualQueryEx
 for dumping states from processes before/after/during 

state: “address_base.alloc_base.hash.size_ID.dat”
id = separation between initial states/loading different inputs/URLs/etc

create a binary diff state for all following reads/IO from sockets/files/etc to deep fuzz every state

insert into mysql library so host/server can distribute to PHI farm

create a smaller API Proxy stub.. or use a debugger and pause the process on start, use VirtualAlloc to create a specific area of memory that can be used consistently across executions… or loading the state of a program being debugged inside of it.. along with all threads/registers..similar to crypopid for linux but for windows and then injected a DLL to hook all winsock/IO to generate fuzz packages to queue in the database



also write linear binary packages for distribution via ASM.JS

 
 -----
 1. VM - and conversion of ASM binary into the VM
2. Automated Exploit Dev 
3. Automated bug finder
4. communications for all standard protocols
5. arch detection and support
6. OS analyse/detection/support for *unix/win
7. modules / payloads
8. obfuscation/binary rewriting of itself