* DO NOT PUBLISH WITH GIT HISTORY AND REMOVE NOTES/TODO *

TODO FOR PSY/MESZEK 10/23/15

This software is meant to test your own software, or network.  I take no responsbility for any damages caused by other uses from users with more malicious intent.

HIGH PRIORITY:

move uc_emu to virtual machine entry.. set user_data before execute but keep memory
check if read/write mem does it before or after…
see about a pre/post hook

see about LDT/GDT
 test multithreading 

change injected DLL to snapshot and binary diff against the original (keep in memory, but monitor the location so we don’t dump it.. as well as any other snapshots in memory.. but since it’ll be heap.. we should get its own pages using virtualloc so its not sharing pages with other heap data)

dump context before every call going to fuzzy functions and continue the software

run bunch of i/o interpreters / network activity apps and start fuzzing

change “dfuzz”, remove python.. test new tables and start fuzzing the fuzzy function dumps (right now start with only the amount of data the fuzzy function returns.. so we want to capture simulations..) so we get the context before AND after the fuzzy function…
log all win32 API on the process being fuzzed beginning with the first fuzzy function..  so the fuzzer can simulate the win32 API without needing the API proxy and only use it as backup

after we fuzz the bytes (size actually being returned) of the fuzzy functions.. then we can manipulate the sizes…
also.. we can start off by manipulating the size ALONE and counting the amount of instructions afterwards before it goes up to parent.. or look for some heuristics like returning -1.. etc 
seeing if we get past logic which is usually immediately after the return…
if the logic allows us to get through the majority of the function, then that size was allowed
this will allow us to start using this type of approach to brute force apps without even fuzzing every byte… the size alone means it’ll still do a memcpy like a backwards men leak (if u think about heart bleed, but backwards) and can be tested thoroughly on every call very quickly and then you can brute force the address space afterwards to control the memory to look for execution

keep the range from the end of the returned data to the increase of the size and determine whether any instructions are reading/writing to these locations and focus on these context settings for exploitation

* now that the emulator is working.. strategy has to change a bit...
  API Proxy client (win32 side) has to be injected with the takeover code...
  It needs to log all win32 API commands in correct order.. and then
  for each 'fuzzed function' (fuzzing the calling function) it will
  need to drop a new memory snapshot (for now drop.. but we need a binary diff
  system)
  the current system is great for taking a linux cloud/standalone server and
  running backdoor code on real windows clients executing from a linux environment
  and proxying the code so the footprint on the backdoored machines is near 0
  and no evidence will be found.. it allows using real windows machines for some win32 api 
  (maybe processing strings, converting unicode, etc) and then proxying the others over a connection
  but for fuzzing.. we mainly want win32 api proxying to be there JUST IN CASE.. and the majority
  of the tasks is having the snapshot and where to return our fuzz input for every single
  call of these particular 'fuzzy functions'
  - I will commit a note here for this point, and create a new branch... and worry about this
  branch later...
  I'll include the piddump and apiproxy used for this particular version..
  it executes correctly however LIDT/GIDT isnt 100% fully emulated..
  right now I just resolve them and it SHOULD allow fuzzing, however
  i need to implement the gidt/lidt.. im going to explore unicorn now and maybe swap over...
  we'll see in 12-24hrs
  
* emulate before we queue instructions so we only give the clients the memory that is
  being used during the fuzzing
  
* piddump and memory loading.. read more than a page at a time
  preferably as much as possible in a linear order
  
* allow ordinals usage in GetProcAddress

* investigate x86_emulate() errors for exploiting VMs

* keep track of all memory/functions used by our 'fuzzing' data
  so we know when its time to stop, or quit queueing into the
  dfuzz server.. overall its working great from a loaded snapshot!
  right now its loading 1 thread (the one handling the data)
  but it could easily support loading other threads..
  its all about the PID Dump stepping them until they exit out of
  kernel/ntdll calls and then dump for us to load.. multithreading
  is working great..
  
  the system is practically finished and ready for PoC release :)
  lets try on some real applications over the weekend and release
  sunday/monday
      
** integrate with real XEN so we can fuzz operating systems easily
  since real XEN uses x86_emulate() we can just create a secondary
  context for each VM with a copy of all the memory purely for fuzzing
  kernel.. or CoW.. check into drakvuf to get information on setting
  breakpoints in particular areas of the OS to dump instructions for
  the farm
  
** API proxy manager.. which will accept a snapshot and load it into memory
  and allow us to call API on the very context that the snapshots were created under
  
  
* Finish API Proxy Multithreaded support.. should be done local side
  finish *ops* functions for x86_emulate().. or move to unnicorn

* coordinate log ID with the next API proxy call so any changed data
  get synchronized

* finish integrating dfuzz

* finish snapshot diff'ing so we can extend from a parent for quickly fuzzing
  deeper into applications
  
* create profiles using 'operations table' where we pass FILE I/O fuzzing
  tasks to an app with all the correct triggers (breakpoints) to dump fuzzing instructions

* create linear assembly code for 'native binary fuzzing' similar to the packets of information to distributed fuzz
  however these are 'binary rewrote' into normal C code that can output executables, asm.js webpages, etc
  
LOWER PRIORITY:

* detect VM by LDT/GDT access checks (see xen/xen/arch/x86/hvm/hvm.c @ line 3628)

* detail documentation for open sourcing and explaining the direction so others can help build if they have ideas

* fuzz x86_emulate() with x86_emulate() ;) 
  i didn't realize this WAS the actual XEN emulator...
  i really thought it was a full blown hypervisor rather than most instructions
  just being encapsulated... im executing this without entering into a hypervisor whatsoever
  which is sort of scary, and all implementations should be of interest


* for people without xeon PHIs.. create a docker version so everyone can begin fuzzing ASAP
  it should be pretty easy to get started.. moved to low priority

* use autohotkey, autoit, or create a new app which can control the top applications to perform various tasks..
  possibly monitor real executions of an app by injection, and monitor its window events
  replaying these events later to perform the same actions on other versions...

* integrate unicorn once we are finished versoin 1 and its finding bugs and released..

* this is moved to low since we attach using a debugger..
  generate a DLL to inject into an app which creates and uploads these packets
  for fuzzing that app with all memory, instructions, etc required to fuzz that software
  - verify speed of different hashing algorithms when enumerating memory allocated
    for dumping and spotting changes in between instructions/calls, or
    loading other files/sites/etc in the same app
    so once we have a base dump of memory.. we will only save the changes
    since that master 'snapshot' each time a new file is loaded, or site opened
    create a rewind for the processes (obviously this cant work for kernel handles, or FILE handles)
    maybe buffer those to emulate it still working properly and just dump to a temp file
    where it is only available during that execution
    
  DLL Notes:
  This is a DLL which is to be injected into a program that is going to be fuzzed...
  It's goals are to instrument every thread, and log all information once a FILE IO/NETWORK IO happens...
  the moment the first FILE IO/Network IO that is in a controlled location (IE: data directory, current directory and not a .dll/.exe/etc)
  or opens a network connection then it freezes and takes a snapshot of the entire memory base..
  from that point on it will log everything that happens and consider that original state 0

  it needs a controller as well because it should have the ability to manually snapshot 0
  and then rewind to 0 so the driver(whomever is controlling the app, or script) can 
  then load another file to be logged...

  every instruction will be emulated with the logger before it is actually executed on the real CPU

  all snapshots besides 0 are linked to each other to save space.. 
  if a function reads from a data location controlled by a FILE or Network IO then it gets added to a list
  and so does its own function.. and if it writes to a location, that gets marked and anything that writes to those locations
  are also monitored

  to handle some state machines... while ((c = *ptr++))  { we want to be able to determine if an entire function has read
  our data and wrote to another location.. a more 'higher level' appraoch than a single instruction reading/writing 

* rebuild relocation (or even just modify in memory) for PEs that do not have
  relocation table.. for a lot of programs this isnt an issue anymore due to
  ASLR enabled apps
  
* modify heap allocation to allow us to request specific areas of memory inside of the heap range..
  first scan and see if we have the range empty (by seeing if its within other heap allocations) and if the range is
  freed but bigger, then we can spit it up.. if its not taken then we can allocate it and then
  future allocations should go around it 
  
* integrate unicorn for multiple architecture support
  replace capstone using emulation (to get size of instruction) and 
  automatically swap endian-ness and detect absolute and immediate addressing
  after getting the size of the instruction.. unless qemu has things to give u this information
  but i dont think so...

* simultaneously brute force all architectures to find opcodes that can be used to
  detect the architecture.. and find a way to determine if a machine is
  win32, bsd, or linux without crashing in any location
  make an IR language or use TCG to make an arch independent, OS independent backdoor
  same as shlelcode but without the main technology.. use static inside once it drops to disk
  grab 1 compiled copy of the destination OS
  
   
 --------------
 NOTES
 --------------
 
 /* distribution of fuzzing tasks

   this needs to allow direct access to all classes to insert the
   necessary memory, code, etc and then it needs to be wiped after the tasks
   are completed...
   
   so brute force, bit flip, etc can all be distributed in ranges, and
   it could be mixed with a variety of software so no single process fuzzes
   the same software consistently.. this allows it to work against
   as many programs as the injectable DLL creates information regarding
   or allows an adware network to upload multiple versions of all apps
   to fuzz everything users generally users
   
   create a server side statistics engine to keep track of all software
   on each desktop machine and focus on the ones with higher counts
   focus and emulate the top versions  (highest count) of each
   application being fuzzed
    

*/
 byte map following instructions through emulation after IO/socket and if that instruction writes to another memory region.. follow it like a rover tap to find all instructions/functions that process the data

typedef struct _MEMORY_BASIC_INFORMATION {
  PVOID  BaseAddress;
  PVOID  AllocationBase;
  DWORD  AllocationProtect;
  SIZE_T RegionSize;
  DWORD  State;
  DWORD  Protect;
  DWORD  Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

VirtualQueryEx
 for dumping states from processes before/after/during 

state: “address_base.alloc_base.hash.size_ID.dat”
id = separation between initial states/loading different inputs/URLs/etc

create a binary diff state for all following reads/IO from sockets/files/etc to deep fuzz every state

insert into mysql library so host/server can distribute to PHI farm

create a smaller API Proxy stub.. or use a debugger and pause the process on start, use VirtualAlloc to create a specific area of memory that can be used consistently across executions… or loading the state of a program being debugged inside of it.. along with all threads/registers..similar to crypopid for linux but for windows and then injected a DLL to hook all winsock/IO to generate fuzz packages to queue in the database



also write linear binary packages for distribution via ASM.JS

 
 -----
 1. VM - and conversion of ASM binary into the VM
2. Automated Exploit Dev 
3. Automated bug finder
4. communications for all standard protocols
5. arch detection and support
6. OS analyse/detection/support for *unix/win
7. modules / payloads
8. obfuscation/binary rewriting of itself
